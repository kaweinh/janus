{"message":"expected one of `::`, `;`, or `as`, found `-`","code":null,"level":"error","spans":[{"file_name":"src/extractors.rs","byte_start":15,"byte_end":16,"line_start":1,"line_end":1,"column_start":16,"column_end":17,"is_primary":true,"text":[{"text":"use crate::crud-ops::errors::Error;","highlight_start":16,"highlight_end":17}],"label":"expected one of `::`, `;`, or `as`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: expected one of `::`, `;`, or `as`, found `-`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/extractors.rs:1:16\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::crud-ops::errors::Error;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of `::`, `;`, or `as`\u001b[0m\n\n"}
{"message":"unused import: `FromRequest`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":91,"byte_end":102,"line_start":1,"line_end":1,"column_start":92,"column_end":103,"is_primary":true,"text":[{"text":"use axum::{routing::get, Router, Extension, http::StatusCode, Json, extract::{Query, Path, FromRequest}};","highlight_start":92,"highlight_end":103}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":89,"byte_end":102,"line_start":1,"line_end":1,"column_start":90,"column_end":103,"is_primary":true,"text":[{"text":"use axum::{routing::get, Router, Extension, http::StatusCode, Json, extract::{Query, Path, FromRequest}};","highlight_start":90,"highlight_end":103}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `FromRequest`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:1:92\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse axum::{routing::get, Router, Extension, http::StatusCode, Json, extract::{Query, Path, FromRequest}};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `convert`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":156,"byte_end":163,"line_start":3,"line_end":3,"column_start":28,"column_end":35,"is_primary":true,"text":[{"text":"use std::{net::SocketAddr, convert};","highlight_start":28,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":154,"byte_end":163,"line_start":3,"line_end":3,"column_start":26,"column_end":35,"is_primary":true,"text":[{"text":"use std::{net::SocketAddr, convert};","highlight_start":26,"highlight_end":35}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `convert`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:3:28\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::{net::SocketAddr, convert};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `Postgres`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":288,"byte_end":296,"line_start":6,"line_end":6,"column_start":46,"column_end":54,"is_primary":true,"text":[{"text":"use sqlx::{Row, FromRow, SqlitePool, Result, Postgres, sqlite::SqliteRow};","highlight_start":46,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":286,"byte_end":296,"line_start":6,"line_end":6,"column_start":44,"column_end":54,"is_primary":true,"text":[{"text":"use sqlx::{Row, FromRow, SqlitePool, Result, Postgres, sqlite::SqliteRow};","highlight_start":44,"highlight_end":54}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Postgres`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:6:46\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse sqlx::{Row, FromRow, SqlitePool, Result, Postgres, sqlite::SqliteRow};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\n"}
{"message":"this function takes 4 arguments but 3 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":2204,"byte_end":2242,"line_start":74,"line_end":74,"column_start":37,"column_end":75,"is_primary":false,"text":[{"text":"    if let Ok( objects ) = read::<T>( &connection_pool, table_name, &map ).await {","highlight_start":37,"highlight_end":75}],"label":"an argument of type `std::option::Option<&str>` is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":2195,"byte_end":2204,"line_start":74,"line_end":74,"column_start":28,"column_end":37,"is_primary":true,"text":[{"text":"    if let Ok( objects ) = read::<T>( &connection_pool, table_name, &map ).await {","highlight_start":28,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":3740,"byte_end":3768,"line_start":129,"line_end":129,"column_start":19,"column_end":47,"is_primary":false,"text":[{"text":"async fn read<T>( connection_pool: &SqlitePool, table_name: String, filters: &HashMap<String, Value>, user_id: Option<&str> ) -> Result <Vec<T>> where T: for<'r> FromRow<'r, SqliteRow> + Send + Unpin {","highlight_start":19,"highlight_end":47}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":3770,"byte_end":3788,"line_start":129,"line_end":129,"column_start":49,"column_end":67,"is_primary":false,"text":[{"text":"async fn read<T>( connection_pool: &SqlitePool, table_name: String, filters: &HashMap<String, Value>, user_id: Option<&str> ) -> Result <Vec<T>> where T: for<'r> FromRow<'r, SqliteRow> + Send + Unpin {","highlight_start":49,"highlight_end":67}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":3790,"byte_end":3822,"line_start":129,"line_end":129,"column_start":69,"column_end":101,"is_primary":false,"text":[{"text":"async fn read<T>( connection_pool: &SqlitePool, table_name: String, filters: &HashMap<String, Value>, user_id: Option<&str> ) -> Result <Vec<T>> where T: for<'r> FromRow<'r, SqliteRow> + Send + Unpin {","highlight_start":69,"highlight_end":101}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":3824,"byte_end":3845,"line_start":129,"line_end":129,"column_start":103,"column_end":124,"is_primary":false,"text":[{"text":"async fn read<T>( connection_pool: &SqlitePool, table_name: String, filters: &HashMap<String, Value>, user_id: Option<&str> ) -> Result <Vec<T>> where T: for<'r> FromRow<'r, SqliteRow> + Send + Unpin {","highlight_start":103,"highlight_end":124}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":3731,"byte_end":3735,"line_start":129,"line_end":129,"column_start":10,"column_end":14,"is_primary":true,"text":[{"text":"async fn read<T>( connection_pool: &SqlitePool, table_name: String, filters: &HashMap<String, Value>, user_id: Option<&str> ) -> Result <Vec<T>> where T: for<'r> FromRow<'r, SqliteRow> + Send + Unpin {","highlight_start":10,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":2204,"byte_end":2242,"line_start":74,"line_end":74,"column_start":37,"column_end":75,"is_primary":true,"text":[{"text":"    if let Ok( objects ) = read::<T>( &connection_pool, table_name, &map ).await {","highlight_start":37,"highlight_end":75}],"label":null,"suggested_replacement":"(&connection_pool, table_name, &map, /* std::option::Option<&str> */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 4 arguments but 3 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:74:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if let Ok( objects ) = read::<T>( &connection_pool, table_name, &map ).await {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12man argument of type `std::option::Option<&str>` is missing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:129:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn read<T>( connection_pool: &SqlitePool, table_name: String, filters: &HashMap<String, Value>, user_id: Option<&str> ) -> Result <\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    if let Ok( objects ) = read::<T>\u001b[0m\u001b[0m\u001b[38;5;10m(&connection_pool, table_name, &map, /* std::option::Option<&str> */)\u001b[0m\u001b[0m.await {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"this function takes 5 arguments but 4 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":3189,"byte_end":3230,"line_start":107,"line_end":107,"column_start":31,"column_end":72,"is_primary":false,"text":[{"text":"        if let Ok(()) = update( &connection_pool, table_name, id, &map).await {","highlight_start":31,"highlight_end":72}],"label":"an argument of type `std::option::Option<&str>` is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":3183,"byte_end":3189,"line_start":107,"line_end":107,"column_start":25,"column_end":31,"is_primary":true,"text":[{"text":"        if let Ok(()) = update( &connection_pool, table_name, id, &map).await {","highlight_start":25,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":6616,"byte_end":6644,"line_start":216,"line_end":216,"column_start":18,"column_end":46,"is_primary":false,"text":[{"text":"async fn update( connection_pool: &SqlitePool, table_name: String, id: i32, values: &HashMap<String, Value>, user_id: Option<&str> ) -> Result<()> {","highlight_start":18,"highlight_end":46}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":6646,"byte_end":6664,"line_start":216,"line_end":216,"column_start":48,"column_end":66,"is_primary":false,"text":[{"text":"async fn update( connection_pool: &SqlitePool, table_name: String, id: i32, values: &HashMap<String, Value>, user_id: Option<&str> ) -> Result<()> {","highlight_start":48,"highlight_end":66}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":6666,"byte_end":6673,"line_start":216,"line_end":216,"column_start":68,"column_end":75,"is_primary":false,"text":[{"text":"async fn update( connection_pool: &SqlitePool, table_name: String, id: i32, values: &HashMap<String, Value>, user_id: Option<&str> ) -> Result<()> {","highlight_start":68,"highlight_end":75}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":6675,"byte_end":6706,"line_start":216,"line_end":216,"column_start":77,"column_end":108,"is_primary":false,"text":[{"text":"async fn update( connection_pool: &SqlitePool, table_name: String, id: i32, values: &HashMap<String, Value>, user_id: Option<&str> ) -> Result<()> {","highlight_start":77,"highlight_end":108}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":6708,"byte_end":6729,"line_start":216,"line_end":216,"column_start":110,"column_end":131,"is_primary":false,"text":[{"text":"async fn update( connection_pool: &SqlitePool, table_name: String, id: i32, values: &HashMap<String, Value>, user_id: Option<&str> ) -> Result<()> {","highlight_start":110,"highlight_end":131}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":6608,"byte_end":6614,"line_start":216,"line_end":216,"column_start":10,"column_end":16,"is_primary":true,"text":[{"text":"async fn update( connection_pool: &SqlitePool, table_name: String, id: i32, values: &HashMap<String, Value>, user_id: Option<&str> ) -> Result<()> {","highlight_start":10,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":3189,"byte_end":3230,"line_start":107,"line_end":107,"column_start":31,"column_end":72,"is_primary":true,"text":[{"text":"        if let Ok(()) = update( &connection_pool, table_name, id, &map).await {","highlight_start":31,"highlight_end":72}],"label":null,"suggested_replacement":"(&connection_pool, table_name, id, &map, /* std::option::Option<&str> */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 5 arguments but 4 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:107:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if let Ok(()) = update( &connection_pool, table_name, id, &map).await {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12man argument of type `std::option::Option<&str>` is missing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:216:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn update( connection_pool: &SqlitePool, table_name: String, id: i32, values: &HashMap<String, Value>, user_id: Option<&str> ) -> R\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        if let Ok(()) = update\u001b[0m\u001b[0m\u001b[38;5;10m(&connection_pool, table_name, id, &map, /* std::option::Option<&str> */)\u001b[0m\u001b[0m.await {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"this function takes 4 arguments but 3 arguments were supplied","code":{"code":"E0061","explanation":"An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":3588,"byte_end":3625,"line_start":122,"line_end":122,"column_start":27,"column_end":64,"is_primary":false,"text":[{"text":"    if let Ok(()) = delete( &connection_pool, table_name, &ids).await {","highlight_start":27,"highlight_end":64}],"label":"an argument of type `std::option::Option<&str>` is missing","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":3582,"byte_end":3588,"line_start":122,"line_end":122,"column_start":21,"column_end":27,"is_primary":true,"text":[{"text":"    if let Ok(()) = delete( &connection_pool, table_name, &ids).await {","highlight_start":21,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":5873,"byte_end":5901,"line_start":190,"line_end":190,"column_start":18,"column_end":46,"is_primary":false,"text":[{"text":"async fn delete( connection_pool: &SqlitePool, table_name: String, ids: &Vec<i32>, user_id: Option<&str> ) -> Result<()> {","highlight_start":18,"highlight_end":46}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":5903,"byte_end":5921,"line_start":190,"line_end":190,"column_start":48,"column_end":66,"is_primary":false,"text":[{"text":"async fn delete( connection_pool: &SqlitePool, table_name: String, ids: &Vec<i32>, user_id: Option<&str> ) -> Result<()> {","highlight_start":48,"highlight_end":66}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":5923,"byte_end":5937,"line_start":190,"line_end":190,"column_start":68,"column_end":82,"is_primary":false,"text":[{"text":"async fn delete( connection_pool: &SqlitePool, table_name: String, ids: &Vec<i32>, user_id: Option<&str> ) -> Result<()> {","highlight_start":68,"highlight_end":82}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":5939,"byte_end":5960,"line_start":190,"line_end":190,"column_start":84,"column_end":105,"is_primary":false,"text":[{"text":"async fn delete( connection_pool: &SqlitePool, table_name: String, ids: &Vec<i32>, user_id: Option<&str> ) -> Result<()> {","highlight_start":84,"highlight_end":105}],"label":"","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":5865,"byte_end":5871,"line_start":190,"line_end":190,"column_start":10,"column_end":16,"is_primary":true,"text":[{"text":"async fn delete( connection_pool: &SqlitePool, table_name: String, ids: &Vec<i32>, user_id: Option<&str> ) -> Result<()> {","highlight_start":10,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"provide the argument","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":3588,"byte_end":3625,"line_start":122,"line_end":122,"column_start":27,"column_end":64,"is_primary":true,"text":[{"text":"    if let Ok(()) = delete( &connection_pool, table_name, &ids).await {","highlight_start":27,"highlight_end":64}],"label":null,"suggested_replacement":"(&connection_pool, table_name, &ids, /* std::option::Option<&str> */)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0061]\u001b[0m\u001b[0m\u001b[1m: this function takes 4 arguments but 3 arguments were supplied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:122:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    if let Ok(()) = delete( &connection_pool, table_name, &ids).await {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12man argument of type `std::option::Option<&str>` is missing\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:190:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn delete( connection_pool: &SqlitePool, table_name: String, ids: &Vec<i32>, user_id: Option<&str> ) -> Result<()> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: provide the argument\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    if let Ok(()) = delete\u001b[0m\u001b[0m\u001b[38;5;10m(&connection_pool, table_name, &ids, /* std::option::Option<&str> */)\u001b[0m\u001b[0m.await {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"aborting due to 4 previous errors; 3 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 4 previous errors; 3 warnings emitted\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0061`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0061`.\u001b[0m\n"}
